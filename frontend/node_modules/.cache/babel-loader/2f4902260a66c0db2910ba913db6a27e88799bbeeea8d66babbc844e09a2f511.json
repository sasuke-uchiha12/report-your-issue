{"ast":null,"code":"var _jsxFileName = \"D:\\\\Creative and innovative project\\\\report-your-issue\\\\src\\\\component\\\\Dashboard\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ComplaintsTable from '../ComplaintsTable';\n// import './AdminDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  const [complaints, setComplaints] = useState([]);\n\n  // Function to handle assignment of workers and status update\n  const handleAssignWorkerAndStatus = (complaintIndex, assignedWorker, status) => {\n    // Update the assigned worker and status of the complaint\n    const updatedComplaints = [...complaints];\n    updatedComplaints[complaintIndex] = {\n      ...updatedComplaints[complaintIndex],\n      assignedWorker,\n      status\n    };\n    setComplaints(updatedComplaints);\n  };\n\n  // Dummy function to simulate fetching complaints from the server\n  const fetchComplaintsFromServer = () => {\n    // Dummy data for demonstration\n    const dummyComplaints = [\n    // Example complaint objects with initial data\n    {\n      identifier: '001',\n      title: 'Title 1',\n      issue: 'Issue 1',\n      assignedWorker: '',\n      status: 'Pending'\n    }, {\n      identifier: '002',\n      title: 'Title 2',\n      issue: 'Issue 2',\n      assignedWorker: '',\n      status: 'Pending'\n    }\n    // Add more complaint objects as needed...\n    ];\n    setComplaints(dummyComplaints);\n  };\n\n  // Fetch complaints when component mounts\n  useState(() => {\n    fetchComplaintsFromServer();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComplaintsTable, {\n      complaints: complaints,\n      handleAssignWorkerAndStatus: handleAssignWorkerAndStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminDashboard, \"K/roa4zVYtSdWHOm1+Sdm5t+S0E=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","ComplaintsTable","jsxDEV","_jsxDEV","AdminDashboard","_s","complaints","setComplaints","handleAssignWorkerAndStatus","complaintIndex","assignedWorker","status","updatedComplaints","fetchComplaintsFromServer","dummyComplaints","identifier","title","issue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Creative and innovative project/report-your-issue/src/component/Dashboard/AdminDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ComplaintsTable from '../ComplaintsTable';\r\n// import './AdminDashboard.css';\r\n\r\nconst AdminDashboard = () => {\r\n    const [complaints, setComplaints] = useState([]);\r\n\r\n    // Function to handle assignment of workers and status update\r\n    const handleAssignWorkerAndStatus = (complaintIndex, assignedWorker, status) => {\r\n        // Update the assigned worker and status of the complaint\r\n        const updatedComplaints = [...complaints];\r\n        updatedComplaints[complaintIndex] = {\r\n            ...updatedComplaints[complaintIndex],\r\n            assignedWorker,\r\n            status,\r\n        };\r\n        setComplaints(updatedComplaints);\r\n    };\r\n\r\n    // Dummy function to simulate fetching complaints from the server\r\n    const fetchComplaintsFromServer = () => {\r\n        // Dummy data for demonstration\r\n        const dummyComplaints = [\r\n            // Example complaint objects with initial data\r\n            { identifier: '001', title: 'Title 1', issue: 'Issue 1', assignedWorker: '', status: 'Pending' },\r\n            { identifier: '002', title: 'Title 2', issue: 'Issue 2', assignedWorker: '', status: 'Pending' },\r\n            // Add more complaint objects as needed...\r\n        ];\r\n        setComplaints(dummyComplaints);\r\n    };\r\n\r\n    // Fetch complaints when component mounts\r\n    useState(() => {\r\n        fetchComplaintsFromServer();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"admin-dashboard\">\r\n            <h1>Admin Dashboard</h1>\r\n            <ComplaintsTable complaints={complaints} handleAssignWorkerAndStatus={handleAssignWorkerAndStatus} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,eAAe,MAAM,oBAAoB;AAChD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMQ,2BAA2B,GAAGA,CAACC,cAAc,EAAEC,cAAc,EAAEC,MAAM,KAAK;IAC5E;IACA,MAAMC,iBAAiB,GAAG,CAAC,GAAGN,UAAU,CAAC;IACzCM,iBAAiB,CAACH,cAAc,CAAC,GAAG;MAChC,GAAGG,iBAAiB,CAACH,cAAc,CAAC;MACpCC,cAAc;MACdC;IACJ,CAAC;IACDJ,aAAa,CAACK,iBAAiB,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;IACpC;IACA,MAAMC,eAAe,GAAG;IACpB;IACA;MAAEC,UAAU,EAAE,KAAK;MAAEC,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEP,cAAc,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAU,CAAC,EAChG;MAAEI,UAAU,EAAE,KAAK;MAAEC,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEP,cAAc,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAU;IAC/F;IAAA,CACH;IACDJ,aAAa,CAACO,eAAe,CAAC;EAClC,CAAC;;EAED;EACAd,QAAQ,CAAC,MAAM;IACXa,yBAAyB,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIV,OAAA;IAAKe,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5BhB,OAAA;MAAAgB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBpB,OAAA,CAACF,eAAe;MAACK,UAAU,EAAEA,UAAW;MAACE,2BAA2B,EAAEA;IAA4B;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpG,CAAC;AAEd,CAAC;AAAAlB,EAAA,CAtCKD,cAAc;AAAAoB,EAAA,GAAdpB,cAAc;AAwCpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}